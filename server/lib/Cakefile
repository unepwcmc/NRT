request = require('request')
Q = require('q')
_ = require('underscore')

standardQuerySuffix =
  'where': 'objectid > 0'
  'objectIds': ''
  'time': ''
  'geometry': ''
  'geometryType':'esriGeometryEnvelope'
  'inSR': ''
  'spatialRel':'esriSpatialRelIntersects'
  'relationParam': ''
  'outFields': ''
  'returnGeometry':'true'
  'maxAllowableOffset': ''
  'geometryPrecision': ''
  'outSR': ''
  'gdbVersion': ''
  'returnIdsOnly':'false'
  'returnCountOnly':'false'
  'orderByFields': ''
  'groupByFieldsForStatistics': ''
  'outStatistics': ''
  'returnZ':'false'
  'returnM':'false'
  'f':'pjson'

worldbankQuerySuffix = 
  "per_page": 100
  "date": "1960:2013"
  "format": "json"

constructUrl = (serviceName, featureServer) ->
  unless serviceName && featureServer
    return console.error 'Need to give serviceName and featureServer'
  "http://196.218.36.14/ka/rest/services/#{serviceName}/FeatureServer/#{featureServer}/query?"

makeRequest = (serviceName, featureServer) ->
  request
    url: constructUrl(serviceName, featureServer)
    qs: standardQuerySuffix
  , handleArcResponse

handleArcResponse = (error, res) ->
  return console.error error if error?
  object = JSON.parse(res.body)
  console.log object.features
  console.log "===\nIn real life, I'd update the database with these values\n==="

handleWBResponse = (error, res) ->
  return console.error error if error?
  object = JSON.parse(res.body)
  console.log object[1]
  console.log "===\nIn real life, I'd update the database with these values\n==="

task 'check:pas', 'check for updated PAs indicator data', (options) ->
  serviceName = 'NRT_AD_ProtectedArea'
  featureServer = 2
  makeRequest(serviceName, featureServer)

task 'check:airquality', 'check for updated Air Quality indicator data', (options) ->
  serviceName = null
  featureServer = null
  makeRequest(serviceName, featureServer)

task 'getwb:allpas', 'query live data.worldbank.org PAs data feed', (options) ->
  request
    url: "http://api.worldbank.org/countries/ARE/indicators/ER.LND.PTLD.ZS"
    qs: worldbankQuerySuffix
    , (err, res) ->
      return console.error(err) if err
      output = []
      data = JSON.parse(res.body)[1]
      for row in data
        unless row.value is null
          output.push _.pick(row, ['date', 'value'])
      console.log output


task 'getwb:mpas', 'query live data.worldbank.org PAs data feed', (options) ->
  request
    url: "http://api.worldbank.org/countries/ARE/indicators/ER.MRN.PTMR.ZS"
    qs: worldbankQuerySuffix
    , (err, res) ->
      return console.error(err) if err
      output = []
      data = JSON.parse(res.body)[1]
      for row in data
        unless row.value is null
          output.push _.pick(row, ['date', 'value'])
      console.log output

task 'getwb:tpas', 'query live data.worldbank.org PAs data feed', (options) ->
  request
    url: "http://api.worldbank.org/countries/ARE/indicators/ER.LND.PTLD.ZS"
    qs: worldbankQuerySuffix
    , (err, res) ->
      return console.error(err) if err
      output = []
      data = JSON.parse(res.body)[1]
      for row in data
        unless row.value is null
          output.push _.pick(row, ['date', 'value'])
      console.log output

task 'getwb:co', 'query live data.worldbank.org PAs data feed', (options) ->
  request
    url: "http://api.worldbank.org/countries/ARE/indicators/NY.ADJ.DCO2.GN.ZS"
    qs: worldbankQuerySuffix
    , (err, res) ->
      return console.error(err) if err
      output = []
      data = JSON.parse(res.body)[1]
      for row in data
        unless row.value is null
          output.push _.pick(row, ['date', 'value'])
      console.log output


