// Generated by CoffeeScript 1.6.3
(function() {
  var _base, _base1, _base2,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (_base = window.Backbone).Diorama || (_base.Diorama = {});

  Backbone.Diorama.Controller = (function() {
    function Controller() {}

    _.extend(Controller.prototype, Backbone.Events);

    Controller.prototype.changeStateOn = function() {
      var boundTransition, transitionBinding, transitionBindings, _i, _len, _results,
        _this = this;
      transitionBindings = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.stateEventBindings || (this.stateEventBindings = []);
      _results = [];
      for (_i = 0, _len = transitionBindings.length; _i < _len; _i++) {
        transitionBinding = transitionBindings[_i];
        boundTransition = (function() {
          var newState;
          newState = transitionBinding.newState;
          return function() {
            return _this.transitionToState(newState, arguments);
          };
        })();
        transitionBinding.publisher.on(transitionBinding.event, boundTransition);
        _results.push(this.stateEventBindings.push({
          publisher: transitionBinding.publisher,
          event: transitionBinding.event,
          transition: boundTransition
        }));
      }
      return _results;
    };

    Controller.prototype.clearStateEventBindings = function() {
      _.each(this.stateEventBindings, function(binding) {
        return binding.publisher.off(binding.event, binding.transition);
      });
      return this.stateEventBindings = [];
    };

    Controller.prototype.transitionToState = function(state, eventArguments) {
      this.clearStateEventBindings();
      return state.apply(this, eventArguments);
    };

    return Controller;

  })();

  (_base1 = window.Backbone).Diorama || (_base1.Diorama = {});

  Backbone.Diorama.ManagedRegion = (function() {
    function ManagedRegion(options) {
      this.tagName = (options != null ? options.tagName : void 0) || 'div';
      this.$el = $("<" + this.tagName + ">");
    }

    ManagedRegion.prototype.showView = function(view) {
      if (this.currentView) {
        this.currentView.close();
      }
      this.currentView = view;
      this.currentView.render();
      return this.$el.html(this.currentView.el);
    };

    ManagedRegion.prototype.isEmpty = function() {
      return this.$el.is(':empty');
    };

    return ManagedRegion;

  })();

  _.extend(Backbone.View.prototype, {
    bindTo: function(model, ev, callback) {
      model.bind(ev, callback, this);
      if (this.bindings == null) {
        this.bindings = [];
      }
      return this.bindings.push({
        model: model,
        ev: ev,
        callback: callback
      });
    },
    unbindFromAll: function() {
      if (this.bindings != null) {
        _.each(this.bindings, function(binding) {
          return binding.model.unbind(binding.ev, binding.callback);
        });
      }
      return this.bindings = [];
    },
    close: function() {
      this.unbindFromAll();
      this.unbind();
      this.remove();
      if (this.onClose) {
        return this.onClose();
      }
    }
  });

  window.Backbone || (window.Backbone = {});

  (_base2 = window.Backbone).Views || (_base2.Views = {});

  Backbone.Diorama.NestingView = (function(_super) {
    __extends(NestingView, _super);

    function NestingView() {
      this.addSubViewTo = __bind(this.addSubViewTo, this);
      Handlebars.registerHelper('addSubViewTo', this.addSubViewTo);
      NestingView.__super__.constructor.apply(this, arguments);
    }

    NestingView.prototype.addSubViewTo = function(view, subViewName, cacheKeyTemplate, options) {
      if (arguments.length === 3) {
        options = cacheKeyTemplate;
        return this.addSubView.call(view, subViewName, options);
      } else {
        return this.addSubView.call(view, subViewName, cacheKeyTemplate, options);
      }
    };

    NestingView.prototype.addSubView = function(viewName, cacheKeyTemplate, options) {
      var View, cacheKey, compiledTemplate, view, viewOptions;
      if (arguments.length === 2) {
        options = cacheKeyTemplate;
        cacheKeyTemplate = null;
      }
      viewOptions = options.hash || {};
      if (cacheKeyTemplate != null) {
        compiledTemplate = Handlebars.compile(cacheKeyTemplate);
        cacheKey = compiledTemplate(viewOptions);
      } else {
        cacheKey = null;
      }
      this.subViews || (this.subViews = {});
      if (this.subViews[cacheKey] != null) {
        view = this.subViews[cacheKey];
      } else {
        View = Backbone.Views[viewName];
        if (View == null) {
          throw new Error("Can't add subView 'Backbone.Views." + viewName + "', no such view exists");
        }
        view = new View(viewOptions);
        cacheKey || (cacheKey = view.cid);
        this.subViews[cacheKey] = view;
      }
      return this.generateSubViewPlaceholderTag(view, cacheKey);
    };

    NestingView.prototype.generateSubViewPlaceholderTag = function(subView, cacheKey) {
      var el;
      el = subView.el;
      $(el).attr('data-sub-view-key', cacheKey);
      return new Handlebars.SafeString(this.htmlNodeToString(el));
    };

    NestingView.prototype.closeSubViewsWithoutPlaceholders = function() {
      var key, subView, _ref, _results;
      _ref = this.subViews;
      _results = [];
      for (key in _ref) {
        subView = _ref[key];
        if (this.$el.find("[data-sub-view-key=\"" + key + "\"]").length === 0) {
          subView.close();
          _results.push(delete this.subViews[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    NestingView.prototype.attachSubViews = function() {
      var key, placeholderEl, subView, _ref, _results;
      this.dontShowRenderViewChangeMessage = true;
      this.closeSubViewsWithoutPlaceholders();
      if (this.subViews != null) {
        _ref = this.subViews;
        _results = [];
        for (key in _ref) {
          subView = _ref[key];
          placeholderEl = this.$el.find("[data-sub-view-key=\"" + key + "\"]");
          subView.$el.insertBefore(placeholderEl);
          subView.delegateEvents();
          _results.push(placeholderEl.remove());
        }
        return _results;
      }
    };

    NestingView.prototype.renderSubViews = function() {
      var error, key, subView, _ref, _results;
      if (this.dontShowRenderViewChangeMessage == null) {
        error = new Error("Diorama.NestingView.renderSubViews was called before attachSubViews! If  you've just upgraded diorama, check out the changes to NestingView here:   https://github.com/th3james/BackboneDiorama/blob/master/src/lib/diorama_nesting_view.md#upgrading-from-diorama-020");
        error.stack;
        throw error;
      }
      _ref = this.subViews;
      _results = [];
      for (key in _ref) {
        subView = _ref[key];
        _results.push(subView.render());
      }
      return _results;
    };

    NestingView.prototype.closeSubViews = function() {
      var key, subView, _ref;
      if (this.subViews != null) {
        _ref = this.subViews;
        for (key in _ref) {
          subView = _ref[key];
          subView.close();
        }
        return this.subViews = {};
      }
    };

    NestingView.prototype.htmlNodeToString = function(node) {
      var str, tmpNode;
      tmpNode = document.createElement("div");
      tmpNode.appendChild(node.cloneNode(true));
      str = tmpNode.innerHTML;
      tmpNode = node = null;
      return str;
    };

    return NestingView;

  })(Backbone.View);

}).call(this);
